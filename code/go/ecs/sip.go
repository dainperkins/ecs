// Licensed to Elasticsearch B.V. under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Elasticsearch B.V. licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by scripts/gocodegen.go - DO NOT EDIT.

package ecs

// These fields are used to describe SIPand AD based conversations between
// endpoints and servers, as well as direct communications sessions between
// endpoints.
// Examples include network captures of SIP traffic, network sensors and
// observers providing SIP decode information, as well as SIP server and SIP
// proxy logs.  It is not expected that a SIP proxy or server, which is likely
// normalizing multiple SIP network conversations, will provide the full scope
// of SIP  protocol fields.
// URL fields have been nested under sip, sip.from, sip.to, sip.auth,
// sip.private, and sip.contact. Typical implementations should minimally
// include url.original, url.host, url.port, and url.username, and a  standard
// processing of URI host domains is recommended (url.domain,
// url.top_level_domain, url.registered_domain,  url.subdomain)
type Sip struct {
	// SIP packet type e.g. REQUEST / RESPONSE
	Type string `ecs:"type"`

	// SIP request method, one of INVITE, ACK, BYE, CANCEL, REGISTER, OPTIONS,
	// PRACK, SUBSCRIBE, NOTIFY, PUBLISH, INFO, REFER, SUB-NOT, MESSAGE,
	// UPDATE.
	Method string `ecs:"method"`

	// SIP protocol version used in the conversation (typically 2.0).
	Version string `ecs:"version"`

	// SIP response code (1xx, 2xx, 3xx, 4xx, 5xx)
	Code string `ecs:"code"`

	// SIP response code status message
	Status string `ecs:"status"`

	// SIP accept header indicating application compatibility
	Accept string `ecs:"accept"`

	// Array of allowed/supported SIP Methods (INVITE, ACK, BYE, CANCEL,
	// REGISTER, OPTIONS,  PRACK, SUBSCRIBE, NOTIFY, PUBLISH, INFO, REFER,
	// MESSAGE, UPDATE.)
	Allow string `ecs:"allow"`

	// The SIP [RFC3261] Call-ID header value is a globally unique identifier,
	// which is mandatory in all requests/responses and identifies SIP messages
	// belonging to the same dialog or registration.
	CallID string `ecs:"call_id"`

	// Size of the message portion of the SIP packet, in bytes.
	ContentLength int32 `ecs:"content_length"`

	// Content type identifies the media type used in the message.
	ContentType string `ecs:"content_type"`

	// The Max-Forwards header limits the number of times a request can be
	// forwarded on  its way to the recipient.
	MaxForwards int32 `ecs:"max_forwards"`

	// SIP supported headers list the SIP extensions supported by the device.
	Supported string `ecs:"supported"`

	// Supported SIP Authorization methods
	AuthScheme string `ecs:"auth.scheme"`

	// Authorization realm for SIP authentication and authorization requests
	AuthRealm string `ecs:"auth.realm"`

	// Array of SIP privacy types implemented in the session.  One or more of
	// user, header, session, none, critical, id, and history.
	PrivacyType string `ecs:"privacy.type"`

	// Integer counter representing the SIP request sequence
	CseqCode int32 `ecs:"cseq.code"`

	// SIP request type associated with the CSeq identifier.
	CseqMethod string `ecs:"cseq.method"`

	// This field records the associated contact name of the calling user or
	// system.
	FromDisplayInfo string `ecs:"from.display_info"`

	// SIP source entity session tag, can be used with from.tag and call.id to
	// build a unique identifier for a given call session.
	FromTag string `ecs:"from.tag"`

	// This field records the associated contact name of the called user or
	// system.
	ToDisplayInfo string `ecs:"to.display_info"`

	// SIP called entity session tag, can be used with from.tag and call.id to
	// build a unique identifier for a given call session.
	ToTag string `ecs:"to.tag"`

	// Network transport used by SIP proxy.
	ViaTransport string `ecs:"via.transport"`

	// IP address used by SIP proxy.
	ViaSentByAddress string `ecs:"via.sent_by.address"`

	// Network port used by SIP proxy.
	ViaSentByPort int64 `ecs:"via.sent_by.port"`

	// Translated address of the SIP endpoint when address translation is being
	// utilized.
	ViaReceivedAddress string `ecs:"via.received.address"`

	// Translated network port of the SIP endpoint when address translation is
	// being utilized.
	ViaReceivedPort int64 `ecs:"via.received.port"`

	// SIP protocol version used in the proxyied conversation (typically 2.0).
	ViaVersion string `ecs:"via.version"`

	// The SIP via branch header is a unique transaction id
	ViaBranch string `ecs:"via.branch"`

	// Display name used by the SIP contact.
	ContactDisplayName string `ecs:"contact.display_name"`

	// Network transport used by SIP contact.
	ContactTransport string `ecs:"contact.transport"`

	// Optional SIP contact session identifier.
	ContactLine string `ecs:"contact.line"`

	// The number of seconds before a specific SIP contact expires.
	ContactExpires int32 `ecs:"contact.expires"`

	// SIP contact preference q value.
	ContactQ string `ecs:"contact.q"`

	// SIP Session Description Protocol version
	SdpVersion int32 `ecs:"sdp.version"`

	// Name of the system handling the SIP session, or username associated with
	// the session.
	SdpOwnerUsername string `ecs:"sdp.owner.username"`

	// SIP SDP session owners unique session id.
	SdpOwnerSessionID string `ecs:"sdp.owner.session_id"`

	// SIP SDP session version number, typically incremented any time session
	// settings are modified.
	SdpOwnerVersion string `ecs:"sdp.owner.version"`

	// IP address of the SIP SDP session owner.
	SdpOwnerIP string `ecs:"sdp.owner.ip"`

	// Name of the SIP SDP session, when available.
	SdpSessionName string `ecs:"sdp.session.name"`

	// IP address used to connect to the SIP SDP session
	SdpConnectionAddress string `ecs:"sdp.connection.address"`

	// Array of 0 or more flags provided for the SIP SDP session.
	SdpMediaFlags string `ecs:"sdp.media.flags"`

	// One or more of available media types offered for the SIP SDP session
	// (audio, video, etc.)
	SdpMediaType string `ecs:"sdp.media.type"`

	// Original value of SIP SDP audio protocols and codecs
	SdpAudioOriginal string `ecs:"sdp.audio.original"`

	// Network port used for the SIP SDP audio connection.
	SdpAudioPort int64 `ecs:"sdp.audio.port"`

	// Protocol offered for the SIP SDP audio connection.
	SdpAudioProtocol string `ecs:"sdp.audio.protocol"`

	// Format offered for the SIP SDP audio connection.
	SdpAudioFormat string `ecs:"sdp.audio.format"`

	// Original value of SIP SDP video protocols and codecs.
	SdpVideoOriginal string `ecs:"sdp.video.original"`

	// Network port used for the SIP SDP video connection.
	SdpVideoPort int64 `ecs:"sdp.video.port"`

	// Protocol offered for the SIP SDP video connection.
	SdpVideoProtocol string `ecs:"sdp.video.protocol"`

	// Formats supported for the SIP SDP video connection.
	SdpVideoFormat string `ecs:"sdp.video.format"`
}
